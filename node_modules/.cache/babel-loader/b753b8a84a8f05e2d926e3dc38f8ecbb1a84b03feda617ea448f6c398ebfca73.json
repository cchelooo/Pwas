{"ast":null,"code":"import { create } from \"zustand\";\nconst initializeStock = () => {\n  // Inicializar stock en localStorage si no existe\n  const defaultStock = [{\n    id: 1,\n    stock: 10\n  }, {\n    id: 2,\n    stock: 5\n  }, {\n    id: 3,\n    stock: 8\n  }, {\n    id: 4,\n    stock: 3\n  }, {\n    id: 5,\n    stock: 12\n  }];\n  const storedStock = JSON.parse(localStorage.getItem(\"productStock\"));\n  if (!storedStock) {\n    localStorage.setItem(\"productStock\", JSON.stringify(defaultStock));\n  }\n};\nconst updateStockInStorage = (productId, quantityChange) => {\n  const savedStock = JSON.parse(localStorage.getItem(\"productStock\")) || [];\n  const updatedStock = savedStock.map(product => product.id === productId ? {\n    ...product,\n    stock: product.stock + quantityChange\n  } : product);\n  localStorage.setItem(\"productStock\", JSON.stringify(updatedStock));\n};\ninitializeStock();\nconst useCartStore = create(set => ({\n  cart: [],\n  addToCart: product => set(state => {\n    const existingProduct = state.cart.find(item => item.id === product.id);\n    const stockUpdate = -1 * (product.quantity || 1); // Reducir stock\n\n    updateStockInStorage(product.id, stockUpdate);\n    if (existingProduct) {\n      return {\n        cart: state.cart.map(item => item.id === product.id ? {\n          ...item,\n          quantity: item.quantity + (product.quantity || 1)\n        } : item)\n      };\n    } else {\n      return {\n        cart: [...state.cart, {\n          ...product,\n          quantity: product.quantity || 1\n        }]\n      };\n    }\n  }),\n  removeFromCart: productId => set(state => {\n    const productToRemove = state.cart.find(item => item.id === productId);\n    if (productToRemove) {\n      updateStockInStorage(productId, productToRemove.quantity); // Devolver stock\n    }\n    return {\n      cart: state.cart.filter(item => item.id !== productId)\n    };\n  }),\n  clearCart: () => set(state => {\n    state.cart.forEach(product => {\n      updateStockInStorage(product.id, product.quantity); // Devolver stock\n    });\n    return {\n      cart: []\n    };\n  }),\n  decreaseQuantity: productId => set(state => {\n    const productToDecrease = state.cart.find(item => item.id === productId);\n    if (productToDecrease) {\n      if (productToDecrease.quantity > 1) {\n        updateStockInStorage(productId, 1); // Incrementar stock en 1\n        return {\n          cart: state.cart.map(item => item.id === productId ? {\n            ...item,\n            quantity: item.quantity - 1\n          } : item)\n        };\n      } else {\n        updateStockInStorage(productId, productToDecrease.quantity); // Devolver stock total\n        return {\n          cart: state.cart.filter(item => item.id !== productId)\n        };\n      }\n    }\n  }),\n  getStock: () => JSON.parse(localStorage.getItem(\"productStock\")) || []\n}));\nexport default useCartStore;","map":{"version":3,"names":["create","initializeStock","defaultStock","id","stock","storedStock","JSON","parse","localStorage","getItem","setItem","stringify","updateStockInStorage","productId","quantityChange","savedStock","updatedStock","map","product","useCartStore","set","cart","addToCart","state","existingProduct","find","item","stockUpdate","quantity","removeFromCart","productToRemove","filter","clearCart","forEach","decreaseQuantity","productToDecrease","getStock"],"sources":["C:/Users/msant/Desktop/actualcodigo/src/Store/CartStore.jsx"],"sourcesContent":["import { create } from \"zustand\";\r\n\r\nconst initializeStock = () => {\r\n  // Inicializar stock en localStorage si no existe\r\n  const defaultStock = [\r\n    { id: 1, stock: 10 },\r\n    { id: 2, stock: 5 },\r\n    { id: 3, stock: 8 },\r\n    { id: 4, stock: 3 },\r\n    { id: 5, stock: 12 },\r\n  ];\r\n  const storedStock = JSON.parse(localStorage.getItem(\"productStock\"));\r\n  if (!storedStock) {\r\n    localStorage.setItem(\"productStock\", JSON.stringify(defaultStock));\r\n  }\r\n};\r\n\r\nconst updateStockInStorage = (productId, quantityChange) => {\r\n  const savedStock = JSON.parse(localStorage.getItem(\"productStock\")) || [];\r\n  const updatedStock = savedStock.map((product) =>\r\n    product.id === productId\r\n      ? { ...product, stock: product.stock + quantityChange }\r\n      : product\r\n  );\r\n  localStorage.setItem(\"productStock\", JSON.stringify(updatedStock));\r\n};\r\n\r\ninitializeStock();\r\n\r\nconst useCartStore = create((set) => ({\r\n  cart: [],\r\n\r\n  addToCart: (product) =>\r\n    set((state) => {\r\n      const existingProduct = state.cart.find((item) => item.id === product.id);\r\n      const stockUpdate = -1 * (product.quantity || 1); // Reducir stock\r\n\r\n      updateStockInStorage(product.id, stockUpdate);\r\n\r\n      if (existingProduct) {\r\n        return {\r\n          cart: state.cart.map((item) =>\r\n            item.id === product.id\r\n              ? { ...item, quantity: item.quantity + (product.quantity || 1) }\r\n              : item\r\n          ),\r\n        };\r\n      } else {\r\n        return {\r\n          cart: [...state.cart, { ...product, quantity: product.quantity || 1 }],\r\n        };\r\n      }\r\n    }),\r\n\r\n  removeFromCart: (productId) =>\r\n    set((state) => {\r\n      const productToRemove = state.cart.find((item) => item.id === productId);\r\n      if (productToRemove) {\r\n        updateStockInStorage(productId, productToRemove.quantity); // Devolver stock\r\n      }\r\n      return {\r\n        cart: state.cart.filter((item) => item.id !== productId),\r\n      };\r\n    }),\r\n\r\n  clearCart: () =>\r\n    set((state) => {\r\n      state.cart.forEach((product) => {\r\n        updateStockInStorage(product.id, product.quantity); // Devolver stock\r\n      });\r\n      return {\r\n        cart: [],\r\n      };\r\n    }),\r\n\r\n  decreaseQuantity: (productId) =>\r\n    set((state) => {\r\n      const productToDecrease = state.cart.find((item) => item.id === productId);\r\n      if (productToDecrease) {\r\n        if (productToDecrease.quantity > 1) {\r\n          updateStockInStorage(productId, 1); // Incrementar stock en 1\r\n          return {\r\n            cart: state.cart.map((item) =>\r\n              item.id === productId\r\n                ? { ...item, quantity: item.quantity - 1 }\r\n                : item\r\n            ),\r\n          };\r\n        } else {\r\n          updateStockInStorage(productId, productToDecrease.quantity); // Devolver stock total\r\n          return {\r\n            cart: state.cart.filter((item) => item.id !== productId),\r\n          };\r\n        }\r\n      }\r\n    }),\r\n\r\n  getStock: () => JSON.parse(localStorage.getItem(\"productStock\")) || [],\r\n}));\r\n\r\nexport default useCartStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}