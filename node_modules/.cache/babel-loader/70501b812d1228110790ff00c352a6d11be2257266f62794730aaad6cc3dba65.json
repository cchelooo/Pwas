{"ast":null,"code":"import { create } from \"zustand\";\nconst useCartStore = create(set => ({\n  cart: JSON.parse(localStorage.getItem(\"cart\")) || [],\n  products: JSON.parse(localStorage.getItem(\"products\")) || [],\n  initializeProducts: products => {\n    const cachedProducts = JSON.parse(localStorage.getItem(\"products\"));\n    if (!cachedProducts) {\n      localStorage.setItem(\"products\", JSON.stringify(products));\n      set({\n        products\n      });\n    } else {\n      set({\n        products: cachedProducts\n      });\n    }\n  },\n  addToCart: (product, quantity) => set(state => {\n    const cartItem = state.cart.find(item => item.id === product.id);\n    const updatedCart = cartItem ? state.cart.map(item => item.id === product.id ? {\n      ...item,\n      quantity: item.quantity + quantity\n    } : item) : [...state.cart, {\n      ...product,\n      quantity\n    }];\n    const updatedProducts = state.products.map(item => item.id === product.id ? {\n      ...item,\n      stock: item.stock - quantity\n    } : item);\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    localStorage.setItem(\"products\", JSON.stringify(updatedProducts));\n    return {\n      cart: updatedCart,\n      products: updatedProducts\n    };\n  }),\n  removeFromCart: (productId, quantity) => set(state => {\n    const updatedCart = state.cart.map(item => item.id === productId ? {\n      ...item,\n      quantity: item.quantity - quantity\n    } : item).filter(item => item.quantity > 0);\n    const updatedProducts = state.products.map(item => item.id === productId ? {\n      ...item,\n      stock: item.stock + quantity\n    } : item);\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    localStorage.setItem(\"products\", JSON.stringify(updatedProducts));\n    return {\n      cart: updatedCart,\n      products: updatedProducts\n    };\n  }),\n  clearCart: () => {\n    localStorage.setItem(\"cart\", JSON.stringify([]));\n    set(state => ({\n      cart: [],\n      products: state.products.map(product => {\n        const cartItem = state.cart.find(item => item.id === product.id);\n        return cartItem ? {\n          ...product,\n          stock: product.stock + cartItem.quantity\n        } : product;\n      })\n    }));\n  }\n}));\nexport default useCartStore;","map":{"version":3,"names":["create","useCartStore","set","cart","JSON","parse","localStorage","getItem","products","initializeProducts","cachedProducts","setItem","stringify","addToCart","product","quantity","state","cartItem","find","item","id","updatedCart","map","updatedProducts","stock","removeFromCart","productId","filter","clearCart"],"sources":["C:/Users/msant/Desktop/actualcodigo/src/Store/CartStore.jsx"],"sourcesContent":["import { create } from \"zustand\";\r\n\r\nconst useCartStore = create((set) => ({\r\n  cart: JSON.parse(localStorage.getItem(\"cart\")) || [],\r\n  products: JSON.parse(localStorage.getItem(\"products\")) || [],\r\n\r\n  initializeProducts: (products) => {\r\n    const cachedProducts = JSON.parse(localStorage.getItem(\"products\"));\r\n    if (!cachedProducts) {\r\n      localStorage.setItem(\"products\", JSON.stringify(products));\r\n      set({ products });\r\n    } else {\r\n      set({ products: cachedProducts });\r\n    }\r\n  },\r\n\r\n  addToCart: (product, quantity) =>\r\n    set((state) => {\r\n      const cartItem = state.cart.find((item) => item.id === product.id);\r\n      const updatedCart = cartItem\r\n        ? state.cart.map((item) =>\r\n            item.id === product.id\r\n              ? { ...item, quantity: item.quantity + quantity }\r\n              : item\r\n          )\r\n        : [...state.cart, { ...product, quantity }];\r\n\r\n      const updatedProducts = state.products.map((item) =>\r\n        item.id === product.id\r\n          ? { ...item, stock: item.stock - quantity }\r\n          : item\r\n      );\r\n\r\n      localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\r\n      localStorage.setItem(\"products\", JSON.stringify(updatedProducts));\r\n\r\n      return { cart: updatedCart, products: updatedProducts };\r\n    }),\r\n\r\n  removeFromCart: (productId, quantity) =>\r\n    set((state) => {\r\n      const updatedCart = state.cart\r\n        .map((item) =>\r\n          item.id === productId\r\n            ? { ...item, quantity: item.quantity - quantity }\r\n            : item\r\n        )\r\n        .filter((item) => item.quantity > 0);\r\n\r\n      const updatedProducts = state.products.map((item) =>\r\n        item.id === productId\r\n          ? { ...item, stock: item.stock + quantity }\r\n          : item\r\n      );\r\n\r\n      localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\r\n      localStorage.setItem(\"products\", JSON.stringify(updatedProducts));\r\n\r\n      return { cart: updatedCart, products: updatedProducts };\r\n    }),\r\n\r\n  clearCart: () => {\r\n    localStorage.setItem(\"cart\", JSON.stringify([]));\r\n    set((state) => ({\r\n      cart: [],\r\n      products: state.products.map((product) => {\r\n        const cartItem = state.cart.find((item) => item.id === product.id);\r\n        return cartItem\r\n          ? { ...product, stock: product.stock + cartItem.quantity }\r\n          : product;\r\n      }),\r\n    }));\r\n  },\r\n}));\r\n\r\nexport default useCartStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}