{"ast":null,"code":"import { create } from 'zustand';\nconst useCartStore = create(set => ({\n  cart: [],\n  addToCart: (product, quantity = 1) => set(state => {\n    const existingProduct = state.cart.find(item => item.id === product.id);\n\n    // Reducir el stock desde el store de productos\n    const productStore = useProductStore.getState();\n    productStore.reduceStock(product.id, quantity);\n    if (existingProduct) {\n      // Incrementar la cantidad en el carrito\n      const updatedCart = state.cart.map(item => item.id === product.id ? {\n        ...item,\n        quantity: item.quantity + quantity\n      } : item);\n      return {\n        cart: updatedCart\n      };\n    }\n\n    // Agregar nuevo producto al carrito\n    return {\n      cart: [...state.cart, {\n        ...product,\n        quantity\n      }]\n    };\n  }),\n  removeFromCart: (productId, quantity) => set(state => {\n    const productStore = useProductStore.getState();\n\n    // Restaurar el stock al eliminar del carrito\n    const itemToRemove = state.cart.find(item => item.id === productId);\n    if (itemToRemove) {\n      productStore.restoreStock(productId, itemToRemove.quantity);\n    }\n    return {\n      cart: state.cart.filter(item => item.id !== productId)\n    };\n  }),\n  clearCart: () => set(state => {\n    const productStore = useProductStore.getState();\n    // Restaurar el stock para todos los productos del carrito\n    state.cart.forEach(item => {\n      productStore.restoreStock(item.id, item.quantity);\n    });\n    return {\n      cart: []\n    };\n  })\n}));","map":{"version":3,"names":["create","useCartStore","set","cart","addToCart","product","quantity","state","existingProduct","find","item","id","productStore","useProductStore","getState","reduceStock","updatedCart","map","removeFromCart","productId","itemToRemove","restoreStock","filter","clearCart","forEach"],"sources":["C:/Users/Bzam/Documents/gfolh/src/Store/CartStore.jsx"],"sourcesContent":["import { create } from 'zustand';\r\nconst useCartStore = create((set) => ({\r\n  cart: [],\r\n\r\n  addToCart: (product, quantity = 1) =>\r\n    set((state) => {\r\n      const existingProduct = state.cart.find((item) => item.id === product.id);\r\n\r\n      // Reducir el stock desde el store de productos\r\n      const productStore = useProductStore.getState();\r\n      productStore.reduceStock(product.id, quantity);\r\n\r\n      if (existingProduct) {\r\n        // Incrementar la cantidad en el carrito\r\n        const updatedCart = state.cart.map((item) =>\r\n          item.id === product.id\r\n            ? { ...item, quantity: item.quantity + quantity }\r\n            : item\r\n        );\r\n        return { cart: updatedCart };\r\n      }\r\n\r\n      // Agregar nuevo producto al carrito\r\n      return { cart: [...state.cart, { ...product, quantity }] };\r\n    }),\r\n\r\n  removeFromCart: (productId, quantity) =>\r\n    set((state) => {\r\n      const productStore = useProductStore.getState();\r\n\r\n      // Restaurar el stock al eliminar del carrito\r\n      const itemToRemove = state.cart.find((item) => item.id === productId);\r\n      if (itemToRemove) {\r\n        productStore.restoreStock(productId, itemToRemove.quantity);\r\n      }\r\n\r\n      return {\r\n        cart: state.cart.filter((item) => item.id !== productId),\r\n      };\r\n    }),\r\n\r\n  clearCart: () =>\r\n    set((state) => {\r\n      const productStore = useProductStore.getState();\r\n      // Restaurar el stock para todos los productos del carrito\r\n      state.cart.forEach((item) => {\r\n        productStore.restoreStock(item.id, item.quantity);\r\n      });\r\n\r\n      return { cart: [] };\r\n    }),\r\n}));\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,MAAMC,YAAY,GAAGD,MAAM,CAAEE,GAAG,KAAM;EACpCC,IAAI,EAAE,EAAE;EAERC,SAAS,EAAEA,CAACC,OAAO,EAAEC,QAAQ,GAAG,CAAC,KAC/BJ,GAAG,CAAEK,KAAK,IAAK;IACb,MAAMC,eAAe,GAAGD,KAAK,CAACJ,IAAI,CAACM,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKN,OAAO,CAACM,EAAE,CAAC;;IAEzE;IACA,MAAMC,YAAY,GAAGC,eAAe,CAACC,QAAQ,CAAC,CAAC;IAC/CF,YAAY,CAACG,WAAW,CAACV,OAAO,CAACM,EAAE,EAAEL,QAAQ,CAAC;IAE9C,IAAIE,eAAe,EAAE;MACnB;MACA,MAAMQ,WAAW,GAAGT,KAAK,CAACJ,IAAI,CAACc,GAAG,CAAEP,IAAI,IACtCA,IAAI,CAACC,EAAE,KAAKN,OAAO,CAACM,EAAE,GAClB;QAAE,GAAGD,IAAI;QAAEJ,QAAQ,EAAEI,IAAI,CAACJ,QAAQ,GAAGA;MAAS,CAAC,GAC/CI,IACN,CAAC;MACD,OAAO;QAAEP,IAAI,EAAEa;MAAY,CAAC;IAC9B;;IAEA;IACA,OAAO;MAAEb,IAAI,EAAE,CAAC,GAAGI,KAAK,CAACJ,IAAI,EAAE;QAAE,GAAGE,OAAO;QAAEC;MAAS,CAAC;IAAE,CAAC;EAC5D,CAAC,CAAC;EAEJY,cAAc,EAAEA,CAACC,SAAS,EAAEb,QAAQ,KAClCJ,GAAG,CAAEK,KAAK,IAAK;IACb,MAAMK,YAAY,GAAGC,eAAe,CAACC,QAAQ,CAAC,CAAC;;IAE/C;IACA,MAAMM,YAAY,GAAGb,KAAK,CAACJ,IAAI,CAACM,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKQ,SAAS,CAAC;IACrE,IAAIC,YAAY,EAAE;MAChBR,YAAY,CAACS,YAAY,CAACF,SAAS,EAAEC,YAAY,CAACd,QAAQ,CAAC;IAC7D;IAEA,OAAO;MACLH,IAAI,EAAEI,KAAK,CAACJ,IAAI,CAACmB,MAAM,CAAEZ,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKQ,SAAS;IACzD,CAAC;EACH,CAAC,CAAC;EAEJI,SAAS,EAAEA,CAAA,KACTrB,GAAG,CAAEK,KAAK,IAAK;IACb,MAAMK,YAAY,GAAGC,eAAe,CAACC,QAAQ,CAAC,CAAC;IAC/C;IACAP,KAAK,CAACJ,IAAI,CAACqB,OAAO,CAAEd,IAAI,IAAK;MAC3BE,YAAY,CAACS,YAAY,CAACX,IAAI,CAACC,EAAE,EAAED,IAAI,CAACJ,QAAQ,CAAC;IACnD,CAAC,CAAC;IAEF,OAAO;MAAEH,IAAI,EAAE;IAAG,CAAC;EACrB,CAAC;AACL,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}