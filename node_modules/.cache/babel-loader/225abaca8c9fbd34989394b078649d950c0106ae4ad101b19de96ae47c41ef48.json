{"ast":null,"code":"import { create } from \"zustand\";\nconst useCartStore = create(set => ({\n  cart: [],\n  products: [],\n  // Actualizar la lista de productos (para stock)\n  setProducts: products => set({\n    products\n  }),\n  // Agregar un producto al carrito\n  addToCart: product => set(state => {\n    // Buscar si el producto ya est치 en el carrito\n    const existingProduct = state.cart.find(item => item.id === product.id);\n    if (existingProduct) {\n      // Verificar si hay stock disponible\n      if (existingProduct.quantity < product.stock) {\n        return {\n          cart: state.cart.map(item => item.id === product.id ? {\n            ...item,\n            quantity: item.quantity + 1\n          } : item)\n        };\n      } else {\n        alert(\"No hay suficiente stock disponible.\");\n        return state;\n      }\n    }\n\n    // Agregar nuevo producto al carrito si hay stock\n    if (product.stock > 0) {\n      return {\n        cart: [...state.cart, {\n          ...product,\n          quantity: 1\n        }]\n      };\n    } else {\n      alert(\"Este producto est치 agotado.\");\n      return state;\n    }\n  }),\n  // Quitar una unidad de un producto del carrito\n  removeOneFromCart: productId => set(state => {\n    const existingProduct = state.cart.find(item => item.id === productId);\n    if (existingProduct) {\n      // Reducir la cantidad o eliminar el producto si llega a 0\n      if (existingProduct.quantity > 1) {\n        return {\n          cart: state.cart.map(item => item.id === productId ? {\n            ...item,\n            quantity: item.quantity - 1\n          } : item)\n        };\n      } else {\n        return {\n          cart: state.cart.filter(item => item.id !== productId)\n        };\n      }\n    }\n    return state;\n  }),\n  // Eliminar un producto del carrito\n  removeFromCart: productId => set(state => ({\n    cart: state.cart.filter(item => item.id !== productId)\n  })),\n  // Vaciar el carrito\n  clearCart: () => set({\n    cart: []\n  }),\n  // Calcular totales\n  calculateTotals: () => set(state => {\n    const totalItems = state.cart.reduce((acc, item) => acc + item.quantity, 0);\n    const totalPrice = state.cart.reduce((acc, item) => acc + item.quantity * parseFloat(item.price.slice(1)), 0);\n    return {\n      totalItems,\n      totalPrice\n    };\n  })\n}));\nexport default useCartStore;","map":{"version":3,"names":["create","useCartStore","set","cart","products","setProducts","addToCart","product","state","existingProduct","find","item","id","quantity","stock","map","alert","removeOneFromCart","productId","filter","removeFromCart","clearCart","calculateTotals","totalItems","reduce","acc","totalPrice","parseFloat","price","slice"],"sources":["C:/Users/Bzam/Documents/gfolh/src/Store/CartStore.jsx"],"sourcesContent":["import { create } from \"zustand\";\r\n\r\nconst useCartStore = create((set) => ({\r\n  cart: [],\r\n  products: [],\r\n\r\n  // Actualizar la lista de productos (para stock)\r\n  setProducts: (products) => set({ products }),\r\n\r\n  // Agregar un producto al carrito\r\n  addToCart: (product) =>\r\n    set((state) => {\r\n      // Buscar si el producto ya est치 en el carrito\r\n      const existingProduct = state.cart.find((item) => item.id === product.id);\r\n\r\n      if (existingProduct) {\r\n        // Verificar si hay stock disponible\r\n        if (existingProduct.quantity < product.stock) {\r\n          return {\r\n            cart: state.cart.map((item) =>\r\n              item.id === product.id\r\n                ? { ...item, quantity: item.quantity + 1 }\r\n                : item\r\n            ),\r\n          };\r\n        } else {\r\n          alert(\"No hay suficiente stock disponible.\");\r\n          return state;\r\n        }\r\n      }\r\n\r\n      // Agregar nuevo producto al carrito si hay stock\r\n      if (product.stock > 0) {\r\n        return { cart: [...state.cart, { ...product, quantity: 1 }] };\r\n      } else {\r\n        alert(\"Este producto est치 agotado.\");\r\n        return state;\r\n      }\r\n    }),\r\n\r\n  // Quitar una unidad de un producto del carrito\r\n  removeOneFromCart: (productId) =>\r\n    set((state) => {\r\n      const existingProduct = state.cart.find((item) => item.id === productId);\r\n\r\n      if (existingProduct) {\r\n        // Reducir la cantidad o eliminar el producto si llega a 0\r\n        if (existingProduct.quantity > 1) {\r\n          return {\r\n            cart: state.cart.map((item) =>\r\n              item.id === productId\r\n                ? { ...item, quantity: item.quantity - 1 }\r\n                : item\r\n            ),\r\n          };\r\n        } else {\r\n          return {\r\n            cart: state.cart.filter((item) => item.id !== productId),\r\n          };\r\n        }\r\n      }\r\n\r\n      return state;\r\n    }),\r\n\r\n  // Eliminar un producto del carrito\r\n  removeFromCart: (productId) =>\r\n    set((state) => ({\r\n      cart: state.cart.filter((item) => item.id !== productId),\r\n    })),\r\n\r\n  // Vaciar el carrito\r\n  clearCart: () => set({ cart: [] }),\r\n\r\n  // Calcular totales\r\n  calculateTotals: () =>\r\n    set((state) => {\r\n      const totalItems = state.cart.reduce((acc, item) => acc + item.quantity, 0);\r\n      const totalPrice = state.cart.reduce(\r\n        (acc, item) => acc + item.quantity * parseFloat(item.price.slice(1)),\r\n        0\r\n      );\r\n      return { totalItems, totalPrice };\r\n    }),\r\n}));\r\n\r\nexport default useCartStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}