{"ast":null,"code":"import { create } from \"zustand\";\nconst updateStockInStorage = (productId, quantityChange) => {\n  const savedStock = JSON.parse(localStorage.getItem(\"productStock\")) || [];\n  const updatedStock = savedStock.map(product => product.id === productId ? {\n    ...product,\n    stock: product.stock + quantityChange\n  } : product);\n  localStorage.setItem(\"productStock\", JSON.stringify(updatedStock));\n};\nconst useCartStore = create(set => ({\n  cart: [],\n  addToCart: product => set(state => {\n    const existingProduct = state.cart.find(item => item.id === product.id);\n    if (existingProduct) {\n      return {\n        cart: state.cart.map(item => item.id === product.id ? {\n          ...item,\n          quantity: item.quantity + (product.quantity || 1)\n        } : item)\n      };\n    } else {\n      return {\n        cart: [...state.cart, {\n          ...product,\n          quantity: product.quantity || 1\n        }]\n      };\n    }\n  }),\n  removeFromCart: productId => set(state => {\n    const productToRemove = state.cart.find(item => item.id === productId);\n    if (productToRemove) {\n      updateStockInStorage(productId, productToRemove.quantity); // Devolver stock\n    }\n    return {\n      cart: state.cart.filter(item => item.id !== productId)\n    };\n  }),\n  clearCart: () => set(state => {\n    state.cart.forEach(product => {\n      updateStockInStorage(product.id, product.quantity); // Devolver stock\n    });\n    return {\n      cart: []\n    };\n  }),\n  decreaseQuantity: productId => set(state => {\n    const productToDecrease = state.cart.find(item => item.id === productId);\n    if (productToDecrease) {\n      if (productToDecrease.quantity > 1) {\n        updateStockInStorage(productId, 1); // Incrementar stock en 1\n        return {\n          cart: state.cart.map(item => item.id === productId ? {\n            ...item,\n            quantity: item.quantity - 1\n          } : item)\n        };\n      } else {\n        updateStockInStorage(productId, productToDecrease.quantity); // Devolver stock total\n        return {\n          cart: state.cart.filter(item => item.id !== productId)\n        };\n      }\n    }\n  })\n}));\nexport default useCartStore;","map":{"version":3,"names":["create","updateStockInStorage","productId","quantityChange","savedStock","JSON","parse","localStorage","getItem","updatedStock","map","product","id","stock","setItem","stringify","useCartStore","set","cart","addToCart","state","existingProduct","find","item","quantity","removeFromCart","productToRemove","filter","clearCart","forEach","decreaseQuantity","productToDecrease"],"sources":["C:/Users/msant/Desktop/actualcodigo/src/Store/CartStore.jsx"],"sourcesContent":["import { create } from \"zustand\";\r\n\r\nconst updateStockInStorage = (productId, quantityChange) => {\r\n  const savedStock = JSON.parse(localStorage.getItem(\"productStock\")) || [];\r\n  const updatedStock = savedStock.map((product) =>\r\n    product.id === productId\r\n      ? { ...product, stock: product.stock + quantityChange }\r\n      : product\r\n  );\r\n  localStorage.setItem(\"productStock\", JSON.stringify(updatedStock));\r\n};\r\n\r\nconst useCartStore = create((set) => ({\r\n  cart: [],\r\n\r\n  addToCart: (product) =>\r\n    set((state) => {\r\n      const existingProduct = state.cart.find((item) => item.id === product.id);\r\n      if (existingProduct) {\r\n        return {\r\n          cart: state.cart.map((item) =>\r\n            item.id === product.id\r\n              ? { ...item, quantity: item.quantity + (product.quantity || 1) }\r\n              : item\r\n          ),\r\n        };\r\n      } else {\r\n        return {\r\n          cart: [...state.cart, { ...product, quantity: product.quantity || 1 }],\r\n        };\r\n      }\r\n    }),\r\n\r\n  removeFromCart: (productId) =>\r\n    set((state) => {\r\n      const productToRemove = state.cart.find((item) => item.id === productId);\r\n      if (productToRemove) {\r\n        updateStockInStorage(productId, productToRemove.quantity); // Devolver stock\r\n      }\r\n      return {\r\n        cart: state.cart.filter((item) => item.id !== productId),\r\n      };\r\n    }),\r\n\r\n  clearCart: () =>\r\n    set((state) => {\r\n      state.cart.forEach((product) => {\r\n        updateStockInStorage(product.id, product.quantity); // Devolver stock\r\n      });\r\n      return {\r\n        cart: [],\r\n      };\r\n    }),\r\n\r\n  decreaseQuantity: (productId) =>\r\n    set((state) => {\r\n      const productToDecrease = state.cart.find((item) => item.id === productId);\r\n      if (productToDecrease) {\r\n        if (productToDecrease.quantity > 1) {\r\n          updateStockInStorage(productId, 1); // Incrementar stock en 1\r\n          return {\r\n            cart: state.cart.map((item) =>\r\n              item.id === productId\r\n                ? { ...item, quantity: item.quantity - 1 }\r\n                : item\r\n            ),\r\n          };\r\n        } else {\r\n          updateStockInStorage(productId, productToDecrease.quantity); // Devolver stock total\r\n          return {\r\n            cart: state.cart.filter((item) => item.id !== productId),\r\n          };\r\n        }\r\n      }\r\n    }),\r\n}));\r\n\r\nexport default useCartStore;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}